[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\chiar\AppData\Local\Temp\idea3.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\chiar\AppData\Local\Temp\idea3.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.7 (Oracle Corporation Java 21.0.2)
[debug] Load.defaultLoad until apply took 269.3025ms
[debug]           Load.loadUnit: plugins took 126.6479ms
[debug]           Load.loadUnit: defsScala took 0.4787ms
[debug] [Loading] Scanning directory C:\Users\chiar\IdeaProjects\ScalableProject\project
[debug]             Load.loadUnit: mkEval took 8.4651ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\chiar\IdeaProjects\ScalableProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.5394 ms
[info] loading settings for project scalableproject-build from idea3.sbt...
[debug]               Load.resolveProject(scalableproject-build) took 51.6453ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalableproject-build, base: C:\Users\chiar\IdeaProjects\ScalableProject\project, plugins: List(<none>))) took 79.8585ms
[debug] [Loading] Done in C:\Users\chiar\IdeaProjects\ScalableProject\project, returning: (scalableproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4162.6871ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.484ms
[debug]         Load.loadUnit(file:/C:/Users/chiar/IdeaProjects/ScalableProject/project/, ...) took 4306.1264ms
[debug]       Load.apply: load took 4460.5664ms
[debug]       Load.apply: resolveProjects took 6.2743ms
[debug]       Load.apply: finalTransforms took 83.9828ms
[debug]       Load.apply: config.delegates took 13.7366ms
[debug]       Load.apply: Def.make(settings)... took 678.6817ms
[debug]       Load.apply: structureIndex took 164.5789ms
[debug]       Load.apply: mkStreams took 5.1565ms
[info] loading project definition from C:\Users\chiar\IdeaProjects\ScalableProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7727.2071ms
[debug]     Load.loadUnit: defsScala took 0.0044ms
[debug] [Loading] Scanning directory C:\Users\chiar\IdeaProjects\ScalableProject
[debug]       Load.loadUnit: mkEval took 0.2444ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.7199 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 96.5785ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\chiar\IdeaProjects\ScalableProject, plugins: List(<none>))) took 102.4071ms
[debug] [Loading] Done in C:\Users\chiar\IdeaProjects\ScalableProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2082.4744ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.7477ms
[debug]   Load.loadUnit(file:/C:/Users/chiar/IdeaProjects/ScalableProject/, ...) took 9838.8144ms
[debug] Load.apply: load took 9874.8665ms
[debug] Load.apply: resolveProjects took 0.2818ms
[debug] Load.apply: finalTransforms took 72.4074ms
[debug] Load.apply: config.delegates took 0.5368ms
[debug] Load.apply: Def.make(settings)... took 110.9762ms
[debug] Load.apply: structureIndex took 40.8517ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to ScalableProject (in build file:/C:/Users/chiar/IdeaProjects/ScalableProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62132 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62132, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalableProject (in build file:/C:/Users/chiar/IdeaProjects/ScalableProject/)
[debug] > Exec(idea-shell, None, None)
